from unittest import TestCase

import pymongo.errors

import datalayer.artistnotfound
from datalayer.mongobridge import MongoBridge
from datalayer.artistnotfound import ArtistNotFound
from pymongo.errors import ServerSelectionTimeoutError, InvalidName


class TestMongoBridge(TestCase):

    def setUp(self) -> None:
        # Valid MongoDB to be used for testing, when applicable
        self.mongo_bridge = MongoBridge("mongodb://localhost:27017/", "BristolData", "Artists")

    def test_get_all_artists(self):
        # Get all artists from a db
        artists = self.mongo_bridge.get_all_artists()
        # Check the size of the list of artists generated from the database
        self.assertEqual(179, len(artists))
        # Verify that artists are in proper order in list
        a0 = next(item for item in artists if item["artistID"] == 1826136)["artistName"]
        self.assertEqual("Stephen Tarter", a0)
        a1 = next(item for item in artists if item["artistID"] == 628155)["artistName"]
        self.assertEqual("A. P. Carter", a1)

    def test_get_no_artists(self):
        """
        Assumes that you have created an empty collection called "NoArtists"
        """
        # Attempt to get the ArtistNotFound exception to be raised by feeding in an empty db
        with self.assertRaises(ArtistNotFound):
            self.mongo_bridge = MongoBridge("mongodb://localhost:27017/", "BristolData", "NoArtists")
            artists = self.mongo_bridge.get_all_artists()

    def test_get_artists_from_list(self):
        # Create a list of artists from a list of ids
        ids = [938895, 2634203, 1141486, 908705, 2411933, 2304638, 3895080, 1448909, 1448911, 1141474, 2916175, 353265, 1141476, 938862, 1141491, 1141484, 1141487, 307357, 1141480, 516930, 1001138, 1141475, 269365, 1141488, 1141483, 1141489, 2867358, 2867360, 2189637, 908699, 1420640, 2867359, 1826135]
        artists = self.mongo_bridge.get_artists_from_list(ids)
        # Check that the proper number of artists were pulled from the database
        self.assertEqual(33, len(artists))
        # tests whether the artistID at artists[2] is 1141486
        self.assertEqual(1141486, artists[2]["artistID"])

    def test_get_artists_from_bogus_list(self):
        # Checks the robustness of the list generation by feeding in bad data
        # First part is good; skips the -1 but adds the good items
        ids = [938895, -1, 269365]
        artists = self.mongo_bridge.get_artists_from_list(ids)
        self.assertEqual(2, len(artists))
        # Second part is bad; should fail and thus raise the exception
        ids = [-1]
        with self.assertRaises(ArtistNotFound):
            artists = self.mongo_bridge.get_artists_from_list(ids)

    def test_get_artist_by_id(self):
        # Artist exists
        artist = self.mongo_bridge.get_artist_by_id(269365)
        # Ensure that data obtained is as expected
        self.assertEqual(269365, artist["artistID"])
        self.assertEqual("Jimmie Rodgers", artist["artistName"])
        self.assertEqual(0, artist["level"])
        self.assertEqual("James Charles Rodgers", artist["realname"])

    def test_uri_not_defined(self):
        # Feed in a bad URI in an attempt to get ServerSelectionTimeoutError exception raised
        with self.assertRaises(ServerSelectionTimeoutError):
            self.mongo_bridge = MongoBridge("mongodb://nohost:27017/", "Blah", "Artists")
            artist = self.mongo_bridge.get_artist_by_id(269365)

    def test_db_not_defined(self):
        # Feed in a bad database in an attempt to get an exception to be raised
        with self.assertRaises(ArtistNotFound):
            self.mongo_bridge = MongoBridge("mongodb://localhost:27017/", "BadDB", "Artists")
            a_list = self.mongo_bridge.get_all_artists()

    def test_col_not_defined(self):
        # Feed in a bad collection in an attempt to get an exception to be raised
        #with self.assertRaises(ServerSelectionTimeoutError):
        self.mongo_bridge = MongoBridge("mongodb://localhost:27017/", "BristolData", "Artists")
        a_list = self.mongo_bridge.get_all_artists()

    def test_bad_artist_id(self):
        # Try to find an artist that does not exist and get ArtistNotFound exception raised
        with self.assertRaises(ArtistNotFound):
            self.mongo_bridge = MongoBridge("mongodb://localhost:27017/", "BristolData", "Artists")
            self.mongo_bridge.get_artist_by_id(-1)

    def test_exception_output(self):
        # Create string of expected output to be generated by the exception
        exception_msg = "ArtistNotFound Missing Artist: -1"
        # Get the exception to be thrown using a bad id and store the output in a string
        try:
            self.mongo_bridge = MongoBridge("mongodb://localhost:27017/", "BristolData", "Artists")
            produced_msg = self.mongo_bridge.get_artist_by_id(-1)
        except ArtistNotFound as e:
            # Check that the message output is as expected
            self.assertEqual(exception_msg, e.__str__())
